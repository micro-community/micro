// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proto/store/store.proto

package store

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StoreClient is the client API for Store service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoreClient interface {
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error)
	Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (Store_ListClient, error)
	Databases(ctx context.Context, in *DatabasesRequest, opts ...grpc.CallOption) (*DatabasesResponse, error)
	Tables(ctx context.Context, in *TablesRequest, opts ...grpc.CallOption) (*TablesResponse, error)
}

type storeClient struct {
	cc grpc.ClientConnInterface
}

func NewStoreClient(cc grpc.ClientConnInterface) StoreClient {
	return &storeClient{cc}
}

func (c *storeClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	out := new(ReadResponse)
	err := c.cc.Invoke(ctx, "/store.Store/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := c.cc.Invoke(ctx, "/store.Store/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/store.Store/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (Store_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &Store_ServiceDesc.Streams[0], "/store.Store/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &storeListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Store_ListClient interface {
	Recv() (*ListResponse, error)
	grpc.ClientStream
}

type storeListClient struct {
	grpc.ClientStream
}

func (x *storeListClient) Recv() (*ListResponse, error) {
	m := new(ListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storeClient) Databases(ctx context.Context, in *DatabasesRequest, opts ...grpc.CallOption) (*DatabasesResponse, error) {
	out := new(DatabasesResponse)
	err := c.cc.Invoke(ctx, "/store.Store/Databases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) Tables(ctx context.Context, in *TablesRequest, opts ...grpc.CallOption) (*TablesResponse, error) {
	out := new(TablesResponse)
	err := c.cc.Invoke(ctx, "/store.Store/Tables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoreServer is the server API for Store service.
// All implementations must embed UnimplementedStoreServer
// for forward compatibility
type StoreServer interface {
	Read(context.Context, *ReadRequest) (*ReadResponse, error)
	Write(context.Context, *WriteRequest) (*WriteResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	List(*ListRequest, Store_ListServer) error
	Databases(context.Context, *DatabasesRequest) (*DatabasesResponse, error)
	Tables(context.Context, *TablesRequest) (*TablesResponse, error)
	mustEmbedUnimplementedStoreServer()
}

// UnimplementedStoreServer must be embedded to have forward compatible implementations.
type UnimplementedStoreServer struct {
}

func (UnimplementedStoreServer) Read(context.Context, *ReadRequest) (*ReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedStoreServer) Write(context.Context, *WriteRequest) (*WriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedStoreServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedStoreServer) List(*ListRequest, Store_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedStoreServer) Databases(context.Context, *DatabasesRequest) (*DatabasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Databases not implemented")
}
func (UnimplementedStoreServer) Tables(context.Context, *TablesRequest) (*TablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tables not implemented")
}
func (UnimplementedStoreServer) mustEmbedUnimplementedStoreServer() {}

// UnsafeStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoreServer will
// result in compilation errors.
type UnsafeStoreServer interface {
	mustEmbedUnimplementedStoreServer()
}

func RegisterStoreServer(s grpc.ServiceRegistrar, srv StoreServer) {
	s.RegisterService(&Store_ServiceDesc, srv)
}

func _Store_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/store.Store/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/store.Store/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).Write(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/store.Store/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StoreServer).List(m, &storeListServer{stream})
}

type Store_ListServer interface {
	Send(*ListResponse) error
	grpc.ServerStream
}

type storeListServer struct {
	grpc.ServerStream
}

func (x *storeListServer) Send(m *ListResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Store_Databases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatabasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).Databases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/store.Store/Databases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).Databases(ctx, req.(*DatabasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_Tables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).Tables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/store.Store/Tables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).Tables(ctx, req.(*TablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Store_ServiceDesc is the grpc.ServiceDesc for Store service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Store_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "store.Store",
	HandlerType: (*StoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Read",
			Handler:    _Store_Read_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _Store_Write_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Store_Delete_Handler,
		},
		{
			MethodName: "Databases",
			Handler:    _Store_Databases_Handler,
		},
		{
			MethodName: "Tables",
			Handler:    _Store_Tables_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _Store_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/store/store.proto",
}

// BlobStoreClient is the client API for BlobStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlobStoreClient interface {
	Read(ctx context.Context, in *BlobReadRequest, opts ...grpc.CallOption) (BlobStore_ReadClient, error)
	Write(ctx context.Context, opts ...grpc.CallOption) (BlobStore_WriteClient, error)
	Delete(ctx context.Context, in *BlobDeleteRequest, opts ...grpc.CallOption) (*BlobDeleteResponse, error)
	List(ctx context.Context, in *BlobListRequest, opts ...grpc.CallOption) (*BlobListResponse, error)
}

type blobStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewBlobStoreClient(cc grpc.ClientConnInterface) BlobStoreClient {
	return &blobStoreClient{cc}
}

func (c *blobStoreClient) Read(ctx context.Context, in *BlobReadRequest, opts ...grpc.CallOption) (BlobStore_ReadClient, error) {
	stream, err := c.cc.NewStream(ctx, &BlobStore_ServiceDesc.Streams[0], "/store.BlobStore/Read", opts...)
	if err != nil {
		return nil, err
	}
	x := &blobStoreReadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BlobStore_ReadClient interface {
	Recv() (*BlobReadResponse, error)
	grpc.ClientStream
}

type blobStoreReadClient struct {
	grpc.ClientStream
}

func (x *blobStoreReadClient) Recv() (*BlobReadResponse, error) {
	m := new(BlobReadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blobStoreClient) Write(ctx context.Context, opts ...grpc.CallOption) (BlobStore_WriteClient, error) {
	stream, err := c.cc.NewStream(ctx, &BlobStore_ServiceDesc.Streams[1], "/store.BlobStore/Write", opts...)
	if err != nil {
		return nil, err
	}
	x := &blobStoreWriteClient{stream}
	return x, nil
}

type BlobStore_WriteClient interface {
	Send(*BlobWriteRequest) error
	CloseAndRecv() (*BlobWriteResponse, error)
	grpc.ClientStream
}

type blobStoreWriteClient struct {
	grpc.ClientStream
}

func (x *blobStoreWriteClient) Send(m *BlobWriteRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *blobStoreWriteClient) CloseAndRecv() (*BlobWriteResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BlobWriteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blobStoreClient) Delete(ctx context.Context, in *BlobDeleteRequest, opts ...grpc.CallOption) (*BlobDeleteResponse, error) {
	out := new(BlobDeleteResponse)
	err := c.cc.Invoke(ctx, "/store.BlobStore/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blobStoreClient) List(ctx context.Context, in *BlobListRequest, opts ...grpc.CallOption) (*BlobListResponse, error) {
	out := new(BlobListResponse)
	err := c.cc.Invoke(ctx, "/store.BlobStore/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlobStoreServer is the server API for BlobStore service.
// All implementations must embed UnimplementedBlobStoreServer
// for forward compatibility
type BlobStoreServer interface {
	Read(*BlobReadRequest, BlobStore_ReadServer) error
	Write(BlobStore_WriteServer) error
	Delete(context.Context, *BlobDeleteRequest) (*BlobDeleteResponse, error)
	List(context.Context, *BlobListRequest) (*BlobListResponse, error)
	mustEmbedUnimplementedBlobStoreServer()
}

// UnimplementedBlobStoreServer must be embedded to have forward compatible implementations.
type UnimplementedBlobStoreServer struct {
}

func (UnimplementedBlobStoreServer) Read(*BlobReadRequest, BlobStore_ReadServer) error {
	return status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedBlobStoreServer) Write(BlobStore_WriteServer) error {
	return status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedBlobStoreServer) Delete(context.Context, *BlobDeleteRequest) (*BlobDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedBlobStoreServer) List(context.Context, *BlobListRequest) (*BlobListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedBlobStoreServer) mustEmbedUnimplementedBlobStoreServer() {}

// UnsafeBlobStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlobStoreServer will
// result in compilation errors.
type UnsafeBlobStoreServer interface {
	mustEmbedUnimplementedBlobStoreServer()
}

func RegisterBlobStoreServer(s grpc.ServiceRegistrar, srv BlobStoreServer) {
	s.RegisterService(&BlobStore_ServiceDesc, srv)
}

func _BlobStore_Read_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BlobReadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlobStoreServer).Read(m, &blobStoreReadServer{stream})
}

type BlobStore_ReadServer interface {
	Send(*BlobReadResponse) error
	grpc.ServerStream
}

type blobStoreReadServer struct {
	grpc.ServerStream
}

func (x *blobStoreReadServer) Send(m *BlobReadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BlobStore_Write_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BlobStoreServer).Write(&blobStoreWriteServer{stream})
}

type BlobStore_WriteServer interface {
	SendAndClose(*BlobWriteResponse) error
	Recv() (*BlobWriteRequest, error)
	grpc.ServerStream
}

type blobStoreWriteServer struct {
	grpc.ServerStream
}

func (x *blobStoreWriteServer) SendAndClose(m *BlobWriteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *blobStoreWriteServer) Recv() (*BlobWriteRequest, error) {
	m := new(BlobWriteRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BlobStore_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlobDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlobStoreServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/store.BlobStore/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlobStoreServer).Delete(ctx, req.(*BlobDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlobStore_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlobListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlobStoreServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/store.BlobStore/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlobStoreServer).List(ctx, req.(*BlobListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BlobStore_ServiceDesc is the grpc.ServiceDesc for BlobStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlobStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "store.BlobStore",
	HandlerType: (*BlobStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _BlobStore_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _BlobStore_List_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Read",
			Handler:       _BlobStore_Read_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Write",
			Handler:       _BlobStore_Write_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/store/store.proto",
}
